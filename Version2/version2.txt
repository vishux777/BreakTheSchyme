(function() {
  // Fixed key combination - ALT+3
  const TRIGGER_MOD = 'Alt';
  const TRIGGER_KEY = '3';
  
  // Create a hidden proxy for API calls to avoid direct network detection
  const callAPI = async function(prompt) {
    try {
      // API key is encoded to avoid direct detection
      const apiKey = atob("bmpLdXhMa1cwNDR3bmlWeGlNbHliTTRvM1R5bXBLT1I=");
      
      // Making the request directly since the worker approach has syntax issues
      const response = await fetch("https://api.mistral.ai/v1/chat/completions", {
        method: 'POST',
        headers: { 
          'Content-Type': 'application/json',
          'Authorization': 'Bearer ' + apiKey
        },
        body: JSON.stringify({
          model: "mistral-medium",
          messages: [{ role: "user", content: prompt }],
          max_tokens: 800
        })
      });
      
      return await response.json();
    } catch (e) {
      return {error: "API call failed"};
    }
  };

  // Extract text using minimal DOM operations
  const extractContent = function() {
    let question = '';
    const options = [];
    
    // Extract question text from visible elements
    const elements = document.querySelectorAll('div, p, h1, h2, h3, h4, h5, span, li');
    for (let i = 0; i < elements.length; i++) {
      const el = elements[i];
      if (el.offsetParent !== null && 
          !el.querySelector('input') && 
          (el.innerText || '').trim().length > 15) {
        question += (el.innerText || '').trim() + '\n';
      }
    }
    
    // Extract options
    const inputs = document.querySelectorAll('input[type="radio"], input[type="checkbox"]');
    for (let i = 0; i < inputs.length; i++) {
      const el = inputs[i];
      if (el.offsetParent !== null) {
        let label = '';
        if (el.labels && el.labels.length) {
          label = el.labels[0].innerText;
        } else if (document.querySelector(`label[for="${el.id}"]`)) {
          label = document.querySelector(`label[for="${el.id}"]`).innerText;
        } else if (el.parentElement) {
          label = el.parentElement.innerText;
        }
        if (label) options.push(label.trim());
      }
    }

    return { question: question.trim(), options: options };
  };

  // Display answer with minimally detectable overlay
  const showAnswer = function(answer) {
    // Create a minimal overlay with styling designed to be hard to detect
    const overlay = document.createElement('div');
    
    // Apply styles directly
    overlay.style.position = 'fixed';
    overlay.style.top = '20px';
    overlay.style.right = '20px';
    overlay.style.maxWidth = '400px';
    overlay.style.maxHeight = '80vh';
    overlay.style.overflow = 'auto';
    overlay.style.backgroundColor = 'rgba(30, 30, 30, 0.85)';
    overlay.style.color = '#eee';
    overlay.style.padding = '12px';
    overlay.style.borderRadius = '5px';
    overlay.style.fontFamily = 'inherit';
    overlay.style.fontSize = '14px';
    overlay.style.lineHeight = '1.4';
    overlay.style.zIndex = '2147483647';
    overlay.style.boxShadow = '0 2px 10px rgba(0,0,0,0.2)';
    overlay.style.transition = 'opacity 0.2s';
    overlay.style.opacity = '0';
    overlay.style.textAlign = 'left';
    
    // Create close button
    const closeBtn = document.createElement('div');
    closeBtn.style.position = 'absolute';
    closeBtn.style.top = '5px';
    closeBtn.style.right = '5px';
    closeBtn.style.width = '16px';
    closeBtn.style.height = '16px';
    closeBtn.style.cursor = 'pointer';
    closeBtn.style.fontSize = '16px';
    closeBtn.style.lineHeight = '16px';
    closeBtn.style.textAlign = 'center';
    closeBtn.style.opacity = '0.7';
    closeBtn.innerHTML = 'Ã—';
    closeBtn.addEventListener('click', function() {
      overlay.style.opacity = '0';
      setTimeout(function() { overlay.remove(); }, 200);
    });
    
    // Create content
    const content = document.createElement('div');
    content.textContent = answer;
    
    // Auto-dismiss after 10 seconds
    setTimeout(function() {
      if (document.body.contains(overlay)) {
        overlay.style.opacity = '0';
        setTimeout(function() { overlay.remove(); }, 200);
      }
    }, 10000);
    
    // Assemble and display
    overlay.appendChild(closeBtn);
    overlay.appendChild(content);
    document.body.appendChild(overlay);
    
    // Fade in
    setTimeout(function() { overlay.style.opacity = '1'; }, 10);
  };

  // Process question and get answer
  const processQuestion = async function() {
    try {
      const content = extractContent();
      if (!content.question) {
        console.error("Could not find any question text on this page.");
        return;
      }
      
      const prompt = "Question: " + content.question + "\n" +
        (content.options.length > 0 ? 
         "Options:\n" + content.options.map(function(opt, i) { return (i + 1) + ". " + opt; }).join("\n") : "") +
        "\nPlease provide the correct answer with brief explanation.";

      const result = await callAPI(prompt);
      
      if (result && result.choices && result.choices[0] && result.choices[0].message) {
        showAnswer(result.choices[0].message.content);
      } else {
        showAnswer("Could not retrieve an answer. Try again or check the API connection.");
      }
    } catch (error) {
      console.error("Error processing question:", error);
    }
  };

  // Set up key combination listener
  let keysPressed = {};
  
  const keydownHandler = function(e) {
    keysPressed[e.key] = true;
    
    if (keysPressed[TRIGGER_MOD] && keysPressed[TRIGGER_KEY]) {
      e.preventDefault();
      processQuestion();
    }
  };
  
  const keyupHandler = function(e) {
    delete keysPressed[e.key];
  };
  
  // Add event listeners with a delay to avoid detection
  setTimeout(function() {
    document.addEventListener('keydown', keydownHandler);
    document.addEventListener('keyup', keyupHandler);
  }, 500);
  
  // Notify user that script is active with minimal console log
  console.log("%cAI assistant activated. Press Alt+3 to get answers.", "color:#888;font-size:11px;");
})();
